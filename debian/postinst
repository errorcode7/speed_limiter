#!/bin/sh
set -e

case "$1" in
    configure)
        PREFIX=/usr
        SRC_DIR=$PREFIX/share/speed_limiter
        OUT_DIR=$PREFIX/lib/speed_limiter
        mkdir -p "$OUT_DIR"
        # 若占位 vmlinux.h 存在，优先用 bpftool 生成真实文件覆盖
        if command -v bpftool >/dev/null 2>&1; then
            bpftool btf dump file /sys/kernel/btf/vmlinux format c > "$SRC_DIR/vmlinux.h" 2>/dev/null || true
        fi
        # 生成 vmlinux.h（CO-RE）
        if command -v bpftool >/dev/null 2>&1; then
            bpftool btf dump file /sys/kernel/btf/vmlinux format c > "$SRC_DIR/vmlinux.h" 2>/dev/null || true
        fi
        # try clang-18 fallback to clang
        CLANG=$(command -v clang-18 || true)
        [ -z "$CLANG" ] && CLANG=$(command -v clang || true)
        if [ -n "$CLANG" ]; then
            # 根据当前架构选择 __TARGET_ARCH_*
            ARCH_FLAG="-D__TARGET_ARCH_x86"
            case "$(uname -m)" in
                aarch64|arm64)
                    ARCH_FLAG="-D__TARGET_ARCH_arm64" ;;
                x86_64)
                    ARCH_FLAG="-D__TARGET_ARCH_x86" ;;
                *)
                    ARCH_FLAG="-D__TARGET_ARCH_x86" ;;
            esac
            "$CLANG" -D__BPF_SIDE__ -g -O2 -target bpf $ARCH_FLAG -I"$SRC_DIR" -I"$PREFIX/include/bpf" -c "$SRC_DIR/limiter.bpf.c" -o "$OUT_DIR/limiter.bpf.o" || true
        fi
        ;;
    abort-upgrade|abort-remove|abort-deconfigure)
        ;;
esac

#DEBHELPER#
exit 0
